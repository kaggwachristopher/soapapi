Note: 	- All Model names should follow Pascal Naming convention
	- All field names should start with a small letter, and key words that form the name should be separated with Underscore
	- Add short and meaningfull Description to each model (at the top before any field). 
	do the same for methonds in classes, i.e.

		class  RefactoryUserManager(BaseUserManager):
    
		    """
		    Custom user model manager where email is the unique identifiers
		    for authentication instead of usernames.
		    """
		    def create_user(self, email, password, **extra_fields):
		        """
		        Create and save a User with the given email and password.
		        """
		        if not email:
		            raise ValueError(_('The Email must be set'))
		        email = self.normalize_email(email)
		        user = self.model(email=email, **extra_fields)
		        user.set_password(password)
        
		        user.save()
		        return user


	- Set verbose names for fields (Mostly those to be managed by, with or via django admin)

1. Common fields for all user groups or users should be included with in RefactoryUser Model.
2. some fields are missing in the Administrator Model.
3. Partner Model is missing.
	with in partnership model, for the lookup field called partnership_type, the lookup options are:
		i). Project Partner.
		ii). Industrial Partner.
4. -With in Staff model, partner_id field is missing.
   -Since user_photo is one of the common fields in Refactory staff model, then remove staff_photo field from Staff model
5. For Key fields, i.e. Primary key, Unique key etc, its better to begin by specifying these keys and other options follow
	i.e. role_id=models.CharField(primary_key=True,max_length=20), 
		is better than
	     role_id=models.CharField(max_length=20,primary_key=True)
6. for all models with no field names to be used with in the __str__() method, if that model has a foreign key, 
   through any of the foreign keys, pick a meaningful name from the parent class. i.e.
	
	class Role(models.Model):
	    role_id=models.CharField(max_length=20,primary_key=True)
	    role_name=models.CharField(max_length=20)
	    role_description=models.TextField(max_length=20)
	    registration_date=models.DateTimeField(default=timezone.now)

	    def __str__(self):
	        return self.role_name


	class AdministratorRole(models.Model):

	    administrator_id=models.ForeignKey(Administrator,on_delete=models.CASCADE)
	    role_id=models.ForeignKey(Role,on_delete=models.CASCADE)

	    def __str__(self):
	        return self.role_id.role_name

7. some modifications were made to Models. 
	- Added Program models.
	- Removed catalyst_id and Bootcamp_id fields from Application Model.
	- Added program_id to Application Model

8. for EducationBackground Model, lets change field Degree to Level.
	- the lookup options for Level field are:
		- i. Certificate
		- ii. Diploma
		- iii.Bachelor's
		- iv. Masters
		- v.  PhD (Doctorate)
9. Application Model is missing
10. Competence Model is missing
11. IntervieCategory Model is missing
12. CategoryStructure Model is missing
13. StructureIndicator Model is missing
14. InterviewSet Model is missing
15. InterviewSelection Model is missing
16. Room Model is Missing
17. Batch Model is Missing